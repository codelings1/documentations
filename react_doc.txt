/node documentation

-Inside package.json we can add variables in scripts dictionary to specify different script commands like:
	"start": "node server.js"
 This means writing npm start on cmd line will execute this command.
 	"server": "nodemon server.js"
 This means writing npm run server on cmd line will execute this command. Nodemon is used for displaying changes on the browser without having to restart the server. It will be updated just on refreshing the browser window.


- Promises 
	.then function is for success of a statement. If an error occurs, then we include catch, to catch that error.
	
- To create a MongoDB user

db.createUser(
{user:"sarthak1", pwd:"sarthak1", roles: [{role: "userAdmin",
db: "TutsGalaxy"}]})
 
- Express Router
	For handling get and posts request we use this syntax:
	const express = require('express');
	router = express.Router();
	router.get('',function(req, res))
	
	res.json() is same as res.send() but json one sends the response in JSON format.
	
	JSON Web tokens come in when we have private routes, that specific users have access to. Thus, these requests will have these tokens with them.
	
- Body Parser
	Used for using data from request.body
	
- JWT generates the token and passport library validates that token
	To create a JWT token we use the function jwt.sign as:
	jwt.sign(payload, key, {expiresIn: seconds}, callback function)
	//payload is the data that has to be included while creating the token.
	//key is any key that we can use to pass as a token
	// In the callback function we pass the token using the Bearer keyword in the header, it is a protocol.
	
- Passport is used for validation. It has many strategies like Local, Google, JWT etc. So we need to specify the kind of strategy we would be using.
	We pass the payload(i.e. the token) to passport authentication function which was created using Jwt.sign above, this in turn returns the object that was sent as a payload.
	Using that object we can get the User details.
- var ipAddress = req.headers["x-forwarded-for"]; To get ip address from a request


- Prettier exension in VS code automatically indents the code makes it easy to read.

- Logging in NodeJs
	- npm install simple-node-logger --save
		// create a rolling file logger based on date/time that fires process events
		const opts = {
				errorEventName:'error',
				logDirectory:'/mylogfiles', // NOTE: folder must exist and be writable...
				fileNamePattern:'roll-<DATE>.log',
				dateFormat:'YYYY.MM.DD'
		};
		const log = require('simple-node-logger').createRollingFileLogger( opts );

- We use [async await] to pause the code execution at a point to get a response. await is used in statements which return promises.


React Documentation:
- axios is used to send requests
- We need to add a proxy value inside package.json as we don't want to write the full url to send a request. Using proxy we can just write the url like /api/login.
- React app runs on port 3000 by default.
- Thus we can run node and react in a separate terminal on different ports. To get over running the two separately, we can use concurrently package.
	After installing this package we need to add changes to the node's package.json so that we can use one command to install and run the app.
	"client-install": "npm install --prefix client" // First go to the client directory then run npm install.
	or 
	"client-install": "cd client && npm install"
	- Now to run both backend and frontend add this:
	"dev": "concurrently \"npm run server\" \"npm run client\""
- In React we have either functional components or class based components. We can install the ES7 react redux graph extension for sublime text to auto complete text.
	- (rfc TAB shortcut)Functional Components should only be used to display dumb components that don't have any state, and don't need lifecycle methods. For eg. In footer.	
	- (rcc TAB shortcut) Class components are used when we need life cycle methods. For eg in Navigation Bar.
	- render() -> life cycle method
	- The class inside Html is replaced by className when it is embedded in js.
- BrowserRouter gives us a structure like server where we can navigate back and forth.
- In place of <a> we use Link library.
- We need to bind the current object to an event using this as it is used while setting the state, and if we don't do this, it throws a setstate not found as it doesn't recognise this.
- const {errors} = this.state is same as errors = this.state.errors.
-In React we only had state for components. To get an application level state, we use redux.
- redux-thunk is the middleware which helps us to wait after we make a ajax request before dispatching that request to backend.
- Provider in react is a component which provides the store to maintain state. It is wrapped around the data.
- createStore function is used to store the state for Providers.
	- First parameter is root reducer.
	- Second parameter is the initial State.
	- Third parameter is middleware.
- We use props while referring to actions from a component like this.props.
- To use Redux in na component we need to use connect from react-redux library. It connects redux to the component. When using this we don't just export the component. We export like 
	- export default connect(param1, param2)(Register);
	- param1 = state properties
	- param2 = actions that we want to perform.
	
	We then refer to these actions and state variables using this.props.[action/state variables]
	The state properties that come in param1 come from the reducer.
	
- this.props.history can't be used within an action, it can be used within a component, so we use withRouter to use it within a action.
	history.push(url) redirects us to the specified url.
- The validation token would be stored in localStoragee and would be sent with every request.localStorage only stores Strings.

- We use {} while importing when we don't have the export default and we want to import specific names whic are exported from the file being imported (https://stackoverflow.com/questions/36795819/when-should-i-use-curly-braces-for-es6-import) 

- The dispatch calls on the actions mentioned in reducers.

- Redux changes the data to have one big store for the entire application. Instead of multiple stores we have multiple properties for this javascript object. We never mutate this object ,we oly assign new elements to it.
- Re rendering of component occurs whenever store value changes.
- target="_blank" leads to a vulnerability as The newly opened tab can, say, change the window.opener.location to some phishing page. Or execute some JavaScript on the opener-page on your behalf... Users trust the page that is already opened, they won't get suspicious.
	To fix this use rel="noopener noreferrer" also with target="_blank".
	
- this.setState({}) is a request rather than an immediate update. setState() does not always immediately update the component. It may batch or defer the update until later. This makes reading this.state right after calling setState() a potential pitfall.

- LifeCycleMethods for a component in React => 
	::::: Lifecycle Methods
	
	- componentWillMount is executed before rendering, on both the server and the client side.

	- componentDidMount is executed after the first render only on the client side. This is where AJAX requests and DOM or state updates should occur. This method is also used for integration with other JavaScript frameworks and any functions with delayed execution such as setTimeout or setInterval. We are using it to update the state so we can trigger the other lifecycle methods.

	- componentWillReceiveProps is invoked as soon as the props are updated before another render is called. We triggered it from setNewNumber when we updated the state.

	- shouldComponentUpdate should return true or false value. This will determine if the component will be updated or not. This is set to true by default. If you are sure that the component doesn't need to render after state or props are updated, you can return false value.

	- componentWillUpdate is called just before rendering.

	- componentDidUpdate is called just after rendering.

	- componentWillUnmount is called after the component is unmounted from the dom. We are unmounting our component in main.js.
	
- The initial values of this.props is set in the reducers using the initialstate parameter which is set while initializing the reducer.

- The connect keyword while exporting from a component passes two parameters. These parameters are then passed to the appropriate reducers, which have values defined for these parameters.

- Updating
An update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered:
static getDerivedStateFromProps()
shouldComponentUpdate()
render()
getSnapshotBeforeUpdate()
componentDidUpdate()

- Component will re-render everytime if a state or prop changes for that component.
- We can have data shared between 2 components either by using localStorage or by using props from reducers.

- We should never use setState in componentDidUpdate as it will push this into an infinte loop of rerendering.

- The constructor for a React component is called before it is mounted. When implementing the constructor for a React.Component subclass, you should call super(props) before any other statement. Otherwise, this.props will be undefined in the constructor, which can lead to bugs.
- componentDidMount() - This method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in componentWillUnmount().

- You may call setState() immediately in componentDidMount(). It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the render() will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. In most cases, you should be able to assign the initial state in the constructor() instead. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.
- You may call setState() immediately in componentDidUpdate() but note that it must be wrapped in a condition like in the example above, or you’ll cause an infinite loop.
- shouldComponentUpdate(nextProps, nextState) -> If you are confident you want to write it by hand, you may compare this.props with nextProps and this.state with nextState and return false to tell React the update can be skipped.
- In particular, this.props.children is a special prop, typically defined by the child tags in the JSX expression rather than in the tag itself.
- Note: Always start component names with a capital letter.
React treats components starting with lowercase letters as DOM tags. For example, <div /> represents an HTML div tag, but <Welcome /> represents a component and requires Welcome to be in scope.
- Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.
- For a long time, the lifecycle componentWillReceiveProps was the only way to update state in response to a change in props without an additional render. In version 16.3, we introduced a replacement lifecycle, getDerivedStateFromProps to solve the same use cases in a safer way.
- getDerivedStateFromProps exists for only one purpose. It enables a component to update its internal state as the result of changes in props.
- To avoid derived state ->  The key to both is that for any piece of data, you need to pick a single component that owns it as the source of truth, and avoid duplicating it in other components.
	- Recommendation: Fully controlled component
One way to avoid the problems mentioned above is to remove state from our component entirely. If the email address only exists as a prop, then we don’t have to worry about conflicts with state. We could even convert EmailInput to a lighter-weight functional component:
function EmailInput(props) {
  return <input onChange={props.onChange} value={props.email} />;
}
This approach simplifies the implementation of our component, but if we still want to store a draft value, the parent form component will now need to do that manually.
	- 	Recommendation: Fully uncontrolled component with a key
Another alternative would be for our component to fully own the “draft” email state. In that case, our component could still accept a prop for the initial value, but it would ignore subsequent changes to that prop:
class EmailInput extends Component {
  state = { email: this.props.defaultEmail };

  handleChange = event => {
    this.setState({ email: event.target.value });
  };

  render() {
    return <input onChange={this.handleChange} value={this.state.email} />;
  }
}
In order to reset the value when moving to a different item (as in our password manager scenario), we can use the special React attribute called key. When a key changes, React will create a new component instance rather than update the current one. Keys are usually used for dynamic lists but are also useful here. In our case, we could use the user ID to recreate the email input any time a new user is selected:
<EmailInput
  defaultEmail={this.props.user.email}
  key={this.props.user.id}
/>
- Refs
React supports a special attribute that you can attach to any component. The ref attribute can be an object created by React.createRef() function or a callback function, or a string (in legacy API). When the ref attribute is a callback function, the function receives the underlying DOM element or class instance (depending on the type of element) as its argument. This allows you to have direct access to the DOM element or component instance.
- Controlled vs. Uncontrolled Components
React has two different approaches to dealing with form inputs.
An input form element whose value is controlled by React is called a controlled component. When a user enters data into a controlled component a change event handler is triggered and your code decides whether the input is valid (by re-rendering with the updated value). If you do not re-render then the form element will remain unchanged.
An uncontrolled component works like form elements do outside of React. When a user inputs data into a form field (an input box, dropdown, etc) the updated information is reflected without React needing to do anything. However, this also means that you can’t force the field to have a certain value.
In most cases you should use controlled components.

- Server side rendering in react is when we assign initial state to the components, thus they are loaded from the server side only. When we update the components based on client selecion and make updates for components, that is client side rendering.

- State Updates May Be Asynchronous
React may batch multiple setState() calls into a single update for performance.
Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.
For example, this code may fail to update the counter:
// Wrong
this.setState({
  counter: this.state.counter + this.props.increment,
});
To fix it, use a second form of setState() that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:
// Correct
this.setState((state, props) => ({
  counter: state.counter + props.increment
}));
-  Keys Must Only Be Unique Among Siblings
Keys used within arrays should be unique among their siblings. However they don’t need to be globally unique. We can use the same keys when we produce two different arrays:
function Blog(props) {
  const sidebar = (
    <ul>
      {props.posts.map((post) =>
        <li key={post.id}>
          {post.title}
        </li>
      )}
    </ul>
  );
  const content = props.posts.map((post) =>
    <div key={post.id}>
      <h3>{post.title}</h3>
      <p>{post.content}</p>
    </div>
  );
  return (
    <div>
      {sidebar}
      <hr />
      {content}
    </div>
  );
}

const posts = [
  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},
  {id: 2, title: 'Installation', content: 'You can install React from npm.'}
];
ReactDOM.render(
  <Blog posts={posts} />,
  document.getElementById('root')
);

-  Alternatives to Controlled Components
It can sometimes be tedious to use controlled components, because you need to write an event handler for every way your data can change and pipe all of the input state through a React component. This can become particularly annoying when you are converting a preexisting codebase to React, or integrating a React application with a non-React library. In these situations, you might want to check out uncontrolled components, an alternative technique for implementing input forms.

- Ref ... This keyword is used in React components or elements to create new properties or do some changes to the selected element. The ref to the element is passed to this as input and you can use this name to refer to this element.
	Eg: <div
                            className="selected-flag-options"
                            ref={node => {
                              this.node = node;
                            }}
                          >
	In this example, node has been added as a property of class inside which it is used and node for the input in the function is taken as the reference to this element.
                          
We can also create a reference in the constructor using:
	this.inputElement = React.createRef();
	
Then, we can directly use the reference like:
	ref={this.inputElement}

To focus on the selected element, we use:
	this.inputElement.current.focus()

- PureComponent changes the life-cycle method shouldComponentUpdate and adds some logic to automatically check whether a re-render is required for the component. This allows a PureComponent to call the method render only if it detects changes in state or props.
